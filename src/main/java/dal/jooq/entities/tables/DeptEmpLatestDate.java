/*
 * This file is generated by jOOQ.
 */
package dal.jooq.entities.tables;


import dal.jooq.entities.Employees;
import dal.jooq.entities.tables.records.DeptEmpLatestDateRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeptEmpLatestDate extends TableImpl<DeptEmpLatestDateRecord> {

    private static final long serialVersionUID = -523299510;

    /**
     * The reference instance of <code>employees.dept_emp_latest_date</code>
     */
    public static final DeptEmpLatestDate DEPT_EMP_LATEST_DATE = new DeptEmpLatestDate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DeptEmpLatestDateRecord> getRecordType() {
        return DeptEmpLatestDateRecord.class;
    }

    /**
     * The column <code>employees.dept_emp_latest_date.emp_no</code>.
     */
    public final TableField<DeptEmpLatestDateRecord, Integer> EMP_NO = createField(DSL.name("emp_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>employees.dept_emp_latest_date.from_date</code>.
     */
    public final TableField<DeptEmpLatestDateRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>employees.dept_emp_latest_date.to_date</code>.
     */
    public final TableField<DeptEmpLatestDateRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * Create a <code>employees.dept_emp_latest_date</code> table reference
     */
    public DeptEmpLatestDate() {
        this(DSL.name("dept_emp_latest_date"), null);
    }

    /**
     * Create an aliased <code>employees.dept_emp_latest_date</code> table reference
     */
    public DeptEmpLatestDate(String alias) {
        this(DSL.name(alias), DEPT_EMP_LATEST_DATE);
    }

    /**
     * Create an aliased <code>employees.dept_emp_latest_date</code> table reference
     */
    public DeptEmpLatestDate(Name alias) {
        this(alias, DEPT_EMP_LATEST_DATE);
    }

    private DeptEmpLatestDate(Name alias, Table<DeptEmpLatestDateRecord> aliased) {
        this(alias, aliased, null);
    }

    private DeptEmpLatestDate(Name alias, Table<DeptEmpLatestDateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `dept_emp_latest_date` as select `employees`.`dept_emp`.`emp_no` AS `emp_no`,max(`employees`.`dept_emp`.`from_date`) AS `from_date`,max(`employees`.`dept_emp`.`to_date`) AS `to_date` from `employees`.`dept_emp` group by `employees`.`dept_emp`.`emp_no`"));
    }

    public <O extends Record> DeptEmpLatestDate(Table<O> child, ForeignKey<O, DeptEmpLatestDateRecord> key) {
        super(child, key, DEPT_EMP_LATEST_DATE);
    }

    @Override
    public Schema getSchema() {
        return Employees.EMPLOYEES;
    }

    @Override
    public DeptEmpLatestDate as(String alias) {
        return new DeptEmpLatestDate(DSL.name(alias), this);
    }

    @Override
    public DeptEmpLatestDate as(Name alias) {
        return new DeptEmpLatestDate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DeptEmpLatestDate rename(String name) {
        return new DeptEmpLatestDate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DeptEmpLatestDate rename(Name name) {
        return new DeptEmpLatestDate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDate, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
