/*
 * This file is generated by jOOQ.
 */
package dal.jooq.entities.tables;


import dal.jooq.entities.Employees;
import dal.jooq.entities.Keys;
import dal.jooq.entities.tables.records.SalariesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Salaries extends TableImpl<SalariesRecord> {

    private static final long serialVersionUID = -284302297;

    /**
     * The reference instance of <code>employees.salaries</code>
     */
    public static final Salaries SALARIES = new Salaries();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalariesRecord> getRecordType() {
        return SalariesRecord.class;
    }

    /**
     * The column <code>employees.salaries.emp_no</code>.
     */
    public final TableField<SalariesRecord, Integer> EMP_NO = createField(DSL.name("emp_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>employees.salaries.salary</code>.
     */
    public final TableField<SalariesRecord, Integer> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>employees.salaries.from_date</code>.
     */
    public final TableField<SalariesRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>employees.salaries.to_date</code>.
     */
    public final TableField<SalariesRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * Create a <code>employees.salaries</code> table reference
     */
    public Salaries() {
        this(DSL.name("salaries"), null);
    }

    /**
     * Create an aliased <code>employees.salaries</code> table reference
     */
    public Salaries(String alias) {
        this(DSL.name(alias), SALARIES);
    }

    /**
     * Create an aliased <code>employees.salaries</code> table reference
     */
    public Salaries(Name alias) {
        this(alias, SALARIES);
    }

    private Salaries(Name alias, Table<SalariesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Salaries(Name alias, Table<SalariesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Salaries(Table<O> child, ForeignKey<O, SalariesRecord> key) {
        super(child, key, SALARIES);
    }

    @Override
    public Schema getSchema() {
        return Employees.EMPLOYEES;
    }

    @Override
    public UniqueKey<SalariesRecord> getPrimaryKey() {
        return Keys.KEY_SALARIES_PRIMARY;
    }

    @Override
    public List<UniqueKey<SalariesRecord>> getKeys() {
        return Arrays.<UniqueKey<SalariesRecord>>asList(Keys.KEY_SALARIES_PRIMARY);
    }

    @Override
    public List<ForeignKey<SalariesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SalariesRecord, ?>>asList(Keys.SALARIES_IBFK_1);
    }

    public dal.jooq.entities.tables.Employees employees() {
        return new dal.jooq.entities.tables.Employees(this, Keys.SALARIES_IBFK_1);
    }

    @Override
    public Salaries as(String alias) {
        return new Salaries(DSL.name(alias), this);
    }

    @Override
    public Salaries as(Name alias) {
        return new Salaries(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salaries rename(String name) {
        return new Salaries(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salaries rename(Name name) {
        return new Salaries(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, LocalDate, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
