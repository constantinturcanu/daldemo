/*
 * This file is generated by jOOQ.
 */
package dal.jooq.tables;


import dal.jooq.Employees;
import dal.jooq.tables.records.CurrentDeptEmpRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrentDeptEmp extends TableImpl<CurrentDeptEmpRecord> {

    private static final long serialVersionUID = -1901449636;

    /**
     * The reference instance of <code>employees.current_dept_emp</code>
     */
    public static final CurrentDeptEmp CURRENT_DEPT_EMP = new CurrentDeptEmp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrentDeptEmpRecord> getRecordType() {
        return CurrentDeptEmpRecord.class;
    }

    /**
     * The column <code>employees.current_dept_emp.emp_no</code>.
     */
    public final TableField<CurrentDeptEmpRecord, Integer> EMP_NO = createField(DSL.name("emp_no"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>employees.current_dept_emp.dept_no</code>.
     */
    public final TableField<CurrentDeptEmpRecord, String> DEPT_NO = createField(DSL.name("dept_no"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false), this, "");

    /**
     * The column <code>employees.current_dept_emp.from_date</code>.
     */
    public final TableField<CurrentDeptEmpRecord, LocalDate> FROM_DATE = createField(DSL.name("from_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>employees.current_dept_emp.to_date</code>.
     */
    public final TableField<CurrentDeptEmpRecord, LocalDate> TO_DATE = createField(DSL.name("to_date"), org.jooq.impl.SQLDataType.LOCALDATE, this, "");

    /**
     * Create a <code>employees.current_dept_emp</code> table reference
     */
    public CurrentDeptEmp() {
        this(DSL.name("current_dept_emp"), null);
    }

    /**
     * Create an aliased <code>employees.current_dept_emp</code> table reference
     */
    public CurrentDeptEmp(String alias) {
        this(DSL.name(alias), CURRENT_DEPT_EMP);
    }

    /**
     * Create an aliased <code>employees.current_dept_emp</code> table reference
     */
    public CurrentDeptEmp(Name alias) {
        this(alias, CURRENT_DEPT_EMP);
    }

    private CurrentDeptEmp(Name alias, Table<CurrentDeptEmpRecord> aliased) {
        this(alias, aliased, null);
    }

    private CurrentDeptEmp(Name alias, Table<CurrentDeptEmpRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `current_dept_emp` as select `l`.`emp_no` AS `emp_no`,`d`.`dept_no` AS `dept_no`,`l`.`from_date` AS `from_date`,`l`.`to_date` AS `to_date` from (`employees`.`dept_emp` `d` join `employees`.`dept_emp_latest_date` `l` on(`d`.`emp_no` = `l`.`emp_no` and `d`.`from_date` = `l`.`from_date` and `l`.`to_date` = `d`.`to_date`))"));
    }

    public <O extends Record> CurrentDeptEmp(Table<O> child, ForeignKey<O, CurrentDeptEmpRecord> key) {
        super(child, key, CURRENT_DEPT_EMP);
    }

    @Override
    public Schema getSchema() {
        return Employees.EMPLOYEES;
    }

    @Override
    public CurrentDeptEmp as(String alias) {
        return new CurrentDeptEmp(DSL.name(alias), this);
    }

    @Override
    public CurrentDeptEmp as(Name alias) {
        return new CurrentDeptEmp(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentDeptEmp rename(String name) {
        return new CurrentDeptEmp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CurrentDeptEmp rename(Name name) {
        return new CurrentDeptEmp(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDate, LocalDate> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
