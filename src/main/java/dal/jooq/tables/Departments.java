/*
 * This file is generated by jOOQ.
 */
package dal.jooq.tables;


import dal.jooq.Employees;
import dal.jooq.Keys;
import dal.jooq.tables.records.DepartmentsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Departments extends TableImpl<DepartmentsRecord> {

    private static final long serialVersionUID = -969791791;

    /**
     * The reference instance of <code>employees.departments</code>
     */
    public static final Departments DEPARTMENTS = new Departments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DepartmentsRecord> getRecordType() {
        return DepartmentsRecord.class;
    }

    /**
     * The column <code>employees.departments.dept_no</code>.
     */
    public final TableField<DepartmentsRecord, String> DEPT_NO = createField(DSL.name("dept_no"), org.jooq.impl.SQLDataType.CHAR(4).nullable(false), this, "");

    /**
     * The column <code>employees.departments.dept_name</code>.
     */
    public final TableField<DepartmentsRecord, String> DEPT_NAME = createField(DSL.name("dept_name"), org.jooq.impl.SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * Create a <code>employees.departments</code> table reference
     */
    public Departments() {
        this(DSL.name("departments"), null);
    }

    /**
     * Create an aliased <code>employees.departments</code> table reference
     */
    public Departments(String alias) {
        this(DSL.name(alias), DEPARTMENTS);
    }

    /**
     * Create an aliased <code>employees.departments</code> table reference
     */
    public Departments(Name alias) {
        this(alias, DEPARTMENTS);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Departments(Name alias, Table<DepartmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Departments(Table<O> child, ForeignKey<O, DepartmentsRecord> key) {
        super(child, key, DEPARTMENTS);
    }

    @Override
    public Schema getSchema() {
        return Employees.EMPLOYEES;
    }

    @Override
    public UniqueKey<DepartmentsRecord> getPrimaryKey() {
        return Keys.KEY_DEPARTMENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<DepartmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<DepartmentsRecord>>asList(Keys.KEY_DEPARTMENTS_PRIMARY, Keys.KEY_DEPARTMENTS_DEPT_NAME);
    }

    @Override
    public Departments as(String alias) {
        return new Departments(DSL.name(alias), this);
    }

    @Override
    public Departments as(Name alias) {
        return new Departments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(String name) {
        return new Departments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Departments rename(Name name) {
        return new Departments(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
